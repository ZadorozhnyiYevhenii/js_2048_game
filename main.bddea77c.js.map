{"version":3,"sources":["scripts/main.js"],"names":["board","button","document","querySelector","winMessage","loseMessage","startMessage","gameScore","gameField","size","score","leftMove","isEmptyCells","some","row","includes","placeCells","randomCol","Math","floor","random","randomRow","digit","setSells","gameLoosed","classList","remove","add","i","j","currentCell","rows","cells","num","innerText","value","replace","startGame","move","newRow","deleteEmptyCells","length","push","filter","copyBoard","clone","map","slice","isBoardSame","board1","board2","slideLeft","previousBoard","k","slideUp","column","newColumn","slideDown","c","reverse","b","slideRight","x","addEventListener","el","preventDefault","code"],"mappings":"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","file":"main.bddea77c.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst winMessage = document.querySelector('.message_win');\nconst loseMessage = document.querySelector('.message_lose');\nconst startMessage = document.querySelector('.message_start');\nconst gameScore = document.querySelector('.game_score');\nconst gameField = document.querySelector('.game_field');\n\nconst size = 4;\nlet score = 0;\nlet board;\nlet leftMove = true;\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  startMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n\n  startGame();\n});\n\nfunction isEmptyCells() {\n  return board.some(row => row.includes(0));\n}\n\nfunction placeCells() {\n  if (leftMove) {\n    while (isEmptyCells()) {\n      const randomCol = Math.floor(Math.random() * size);\n      const randomRow = Math.floor(Math.random() * size);\n\n      if (board[randomRow][randomCol] === 0) {\n        const digit = Math.random() < 0.9 ? 2 : 4;\n\n        board[randomRow][randomCol] = digit;\n        setSells();\n        break;\n      }\n    }\n\n    leftMove = false;\n  } else if (!isEmptyCells() && gameLoosed()) {\n    loseMessage.classList.remove('hidden');\n    winMessage.classList.add('hidden');\n  }\n\n  leftMove = true;\n}\n\nfunction gameLoosed() {\n  if (isEmptyCells()) {\n    return false;\n  }\n\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size - 1; j++) {\n      if (board[i][j] === board[i][j + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < size - 1; i++) {\n    for (let j = 0; j < size; j++) {\n      if (board[i][j] === board[i + 1][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction setSells() {\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      const currentCell = gameField.rows[i].cells[j];\n      const num = board[i][j];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field_cell');\n\n      if (num > 0) {\n        currentCell.innerText = num;\n        currentCell.classList.add(`field_cell--${num}`);\n      }\n\n      if (num === 2048) {\n        winMessage.classList.remove('hidden');\n        button.classList.replace('restart', 'start');\n      }\n    }\n  }\n\n  if (gameLoosed()) {\n    loseMessage.classList.remove('hidden');\n    winMessage.classList.add('hidden');\n  }\n}\n\nfunction startGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  gameScore.innerText = score;\n\n  setSells();\n  placeCells();\n  placeCells();\n  leftMove = true;\n}\n\nfunction move(row) {\n  let newRow = deleteEmptyCells(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n\n      gameScore.innerText = score;\n    }\n  }\n\n  newRow = deleteEmptyCells(newRow);\n\n  while (newRow.length < size) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction deleteEmptyCells(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction copyBoard(clone) {\n  return clone.map(row => row.slice());\n}\n\nfunction isBoardSame(board1, board2) {\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      if (board1[i][j] !== board2[i][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction slideLeft() {\n  const previousBoard = copyBoard(board);\n\n  for (let k = 0; k < size; k++) {\n    board[k] = move(board[k]);\n  }\n\n  leftMove = !isBoardSame(board, previousBoard);\n}\n\nfunction slideUp() {\n  const previousBoard = copyBoard(board);\n\n  for (let i = 0; i < size; i++) {\n    const column = [\n      board[0][i],\n      board[1][i],\n      board[2][i],\n      board[3][i],\n    ];\n    const newColumn = move(column);\n\n    for (let k = 0; k < size; k++) {\n      board[k][i] = newColumn[k];\n    }\n  }\n\n  leftMove = !isBoardSame(board, previousBoard);\n}\n\nfunction slideDown() {\n  const previousBoard = copyBoard(board);\n\n  for (let c = 0; c < size; c++) {\n    const column = [\n      board[0][c],\n      board[1][c],\n      board[2][c],\n      board[3][c],\n    ].reverse();\n    const newColumn = move(column).reverse();\n\n    for (let b = 0; b < size; b++) {\n      board[b][c] = newColumn[b];\n    }\n  }\n\n  leftMove = !isBoardSame(board, previousBoard);\n}\n\nfunction slideRight() {\n  const previousBoard = copyBoard(board);\n\n  for (let x = 0; x < size; x++) {\n    board[x] = move(board[x].reverse()).reverse();\n  }\n\n  leftMove = !isBoardSame(board, previousBoard);\n}\n\ndocument.addEventListener('keydown', (el) => {\n  el.preventDefault();\n\n  switch (el.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      break;\n\n    case 'ArrowUp':\n      slideUp();\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      break;\n  }\n\n  placeCells();\n  setSells();\n});\n"]}